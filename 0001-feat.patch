From a55a642c26d6917389b5375ba25acfb10ac2ff4d Mon Sep 17 00:00:00 2001
From: chris <heningyu21@gmail.com>
Date: Thu, 3 Apr 2025 10:39:10 +0800
Subject: [PATCH] feat:

---
 .cursor/rules/navy-ng.mdc                     |   5 ++-
 server/portal/internal/navy.db                | Bin 28672 -> 28672 bytes
 server/portal/internal/routers/f5_info.go     |  39 ++++++++----------
 .../src/components/F5Info/F5InfoDetail.tsx    |   3 +-
 .../src/components/F5Info/F5InfoList.tsx      |  31 +-------------
 web/navy-fe/src/utils/request.ts              |  22 +++++++++-
 6 files changed, 45 insertions(+), 55 deletions(-)

diff --git a/.cursor/rules/navy-ng.mdc b/.cursor/rules/navy-ng.mdc
index 4136c1f..3a338d5 100644
--- a/.cursor/rules/navy-ng.mdc
+++ b/.cursor/rules/navy-ng.mdc
@@ -16,8 +16,9 @@ navy-ng/
 │       └── object.go      # 核心数据模型定义文件
 │
 ├── pkg/                   # 公共库代码 - 可被外部项目引用
-│   └── utils/             # 通用工具包
-│       └── utils.go       # 工具函数集合
+│   └── middleware/        # 中间件
+│       └── render         # controller层渲染相关方法
+│            └── json.go   # 渲染方法
 │
 ├── server/                # 后端服务层
 │   └── portal/            # 门户模块服务
diff --git a/server/portal/internal/navy.db b/server/portal/internal/navy.db
index e4007c97ee903fb56b70679ccb42effdd6d75862..3e3c93b3ffa18f7f5f32cfa481014ef7e0d1a020 100644
GIT binary patch
delta 867
zcmZp8z}WDBae_4CqKPujjEgoV<ca7T8dw>dTbWqsnHgJ{nwV%CSXdbt7#SFu>Kd5n
z8W<~}$xr?(a+!c0BMd$NMbD9}=a1Nbe0q#^jm**Q*{mfY#fVQ6&_kGxE0(-XKo3SB
zY_64(XSCs9fdmsar(g|63oAooJqt@?Lo<`fH>3{}uoc6ln@`E`<MkdkhfL;>yGF7_
zyz)N<coZ4<)A`Qw+3~L9RorZ-z{|_j$TeBsRsz{Hb8~YetX_qtD3JW*G}|~7JqCvO
z^#J83f422<;bG=v^!7HE43*|h$DSa~j7;&_4wRnUY?p*=xv7aU-Xso^pS;dqY_gVp
VD6&2iBNIb>R)OR<ud@#_000@3znTC5

delta 866
zcmZp8z}WDBae_2s-9#B@#=4COc_R7-mR3d<R>o#}hDJu_CZ^g37FGrZMg~Tvx&|h?
z2F40#@{|9HTqdB$2t&_*(Q_p0`6KoppB`gfBXe|nHfu>pG2+t%^bn@wiY0Fo(1Q^O
zn`@=y8ErUOAi;#qDagTyO@8tX>B9tU#c=87Q!@N`y@%Bz4!LV2Tf{5>Q-DXFfj^z^
zET0YU8eaL$h6=pAlND_xkc~1lH8(`|Cwg)L$xqI(jYHOBU}|K7PY+0b@>g3gH$G-g
zMqgiJ$xvzDbgZe-(9+D(43AM@`N_?8Nl4ZkT3DD`;L`(=pS;dqY_gVpD6&3tGc&yU
MK=PZ{*#{W_0P0)6BLDyZ

diff --git a/server/portal/internal/routers/f5_info.go b/server/portal/internal/routers/f5_info.go
index 9c63e1a..d626d93 100644
--- a/server/portal/internal/routers/f5_info.go
+++ b/server/portal/internal/routers/f5_info.go
@@ -3,8 +3,9 @@ package routers
 
 import (
 	"fmt"
+	render "navy-ng/pkg/middleware/render"
+
 	"navy-ng/server/portal/internal/service"
-	"net/http"
 	"strconv"
 
 	"github.com/gin-gonic/gin"
@@ -12,10 +13,6 @@ import (
 
 // Constants for HTTP status codes and default values
 const (
-	StatusBadRequest          = http.StatusBadRequest
-	StatusInternalServerError = http.StatusInternalServerError
-	StatusOK                    = http.StatusOK
-	StatusNotFound              = http.StatusNotFound
 	base10                    = 10
 	bitSize64                 = 64
 	routeParamID              = "id"           // Route parameter for ID
@@ -56,38 +53,38 @@ func (h *F5InfoHandler) getF5Info(c *gin.Context) {
 	idStr := c.Param(routeParamID)
 	id, err := strconv.ParseInt(idStr, base10, bitSize64)
 	if err != nil {
-		c.JSON(StatusBadRequest, service.ErrorResponse{Error: msgInvalidIDFormat})
+		render.BadRequest(c, msgInvalidIDFormat)
 		return
 	}
 
 	f5Info, err := h.f5Service.GetF5Info(c.Request.Context(), id)
 	if err != nil {
 		if err.Error() == fmt.Sprintf(service.ErrRecordNotFoundMsg, id) {
-			c.JSON(StatusNotFound, service.ErrorResponse{Error: err.Error()})
+			render.NotFound(c, err.Error())
 		} else {
-			c.JSON(StatusInternalServerError, service.ErrorResponse{Error: err.Error()})
+			render.InternalServerError(c, err.Error())
 		}
 		return
 	}
 
-	c.JSON(StatusOK, f5Info)
+	render.Success(c, f5Info)
 }
 
 // listF5Infos handles GET /f5 requests.
 func (h *F5InfoHandler) listF5Infos(c *gin.Context) {
 	var query service.F5InfoQuery
 	if err := c.ShouldBindQuery(&query); err != nil {
-		c.JSON(StatusBadRequest, service.ErrorResponse{Error: fmt.Sprintf(msgInvalidQueryParams, err.Error())})
+		render.BadRequest(c, fmt.Sprintf(msgInvalidQueryParams, err.Error()))
 		return
 	}
 
 	response, err := h.f5Service.ListF5Infos(c.Request.Context(), &query)
 	if err != nil {
-		c.JSON(StatusInternalServerError, service.ErrorResponse{Error: fmt.Sprintf(msgFailedToList, err.Error())})
+		render.InternalServerError(c, fmt.Sprintf(msgFailedToList, err.Error()))
 		return
 	}
 
-	c.JSON(StatusOK, response)
+	render.Success(c, response)
 }
 
 // updateF5Info handles PUT /f5/:id requests.
@@ -95,26 +92,26 @@ func (h *F5InfoHandler) updateF5Info(c *gin.Context) {
 	idStr := c.Param(routeParamID)
 	id, err := strconv.ParseInt(idStr, base10, bitSize64)
 	if err != nil {
-		c.JSON(StatusBadRequest, service.ErrorResponse{Error: msgInvalidIDFormat})
+		render.BadRequest(c, msgInvalidIDFormat)
 		return
 	}
 
 	var dto service.F5InfoUpdateDTO
 	if bindErr := c.ShouldBindJSON(&dto); bindErr != nil {
-		c.JSON(StatusBadRequest, service.ErrorResponse{Error: fmt.Sprintf(msgInvalidRequestBody, bindErr.Error())})
+		render.BadRequest(c, fmt.Sprintf(msgInvalidRequestBody, bindErr.Error()))
 		return
 	}
 
 	if err := h.f5Service.UpdateF5Info(c.Request.Context(), id, &dto); err != nil {
 		if err.Error() == fmt.Sprintf(service.ErrRecordNotFoundMsg, id) {
-			c.JSON(StatusNotFound, service.ErrorResponse{Error: err.Error()})
+			render.NotFound(c, err.Error())
 		} else {
-			c.JSON(StatusInternalServerError, service.ErrorResponse{Error: fmt.Sprintf(msgFailedToUpdate, err.Error())})
+			render.InternalServerError(c, fmt.Sprintf(msgFailedToUpdate, err.Error()))
 		}
 		return
 	}
 
-	c.JSON(StatusOK, service.SuccessResponse{Message: msgSuccessUpdate})
+	render.SuccessWithMessage(c, msgSuccessUpdate, nil)
 }
 
 // deleteF5Info handles DELETE /f5/:id requests.
@@ -122,18 +119,18 @@ func (h *F5InfoHandler) deleteF5Info(c *gin.Context) {
 	idStr := c.Param(routeParamID)
 	id, err := strconv.ParseInt(idStr, base10, bitSize64)
 	if err != nil {
-		c.JSON(StatusBadRequest, service.ErrorResponse{Error: msgInvalidIDFormat})
+		render.BadRequest(c, msgInvalidIDFormat)
 		return
 	}
 
 	if err := h.f5Service.DeleteF5Info(c.Request.Context(), id); err != nil {
 		if err.Error() == fmt.Sprintf(service.ErrRecordNotFoundMsg, id) {
-			c.JSON(StatusNotFound, service.ErrorResponse{Error: err.Error()})
+			render.NotFound(c, err.Error())
 		} else {
-			c.JSON(StatusInternalServerError, service.ErrorResponse{Error: fmt.Sprintf(msgFailedToDelete, err.Error())})
+			render.InternalServerError(c, fmt.Sprintf(msgFailedToDelete, err.Error()))
 		}
 		return
 	}
 
-	c.JSON(StatusOK, service.SuccessResponse{Message: msgSuccessDelete})
+	render.SuccessWithMessage(c, msgSuccessDelete, nil)
 }
diff --git a/web/navy-fe/src/components/F5Info/F5InfoDetail.tsx b/web/navy-fe/src/components/F5Info/F5InfoDetail.tsx
index a697950..e31cf47 100644
--- a/web/navy-fe/src/components/F5Info/F5InfoDetail.tsx
+++ b/web/navy-fe/src/components/F5Info/F5InfoDetail.tsx
@@ -1,13 +1,12 @@
 import { useEffect, useState } from 'react';
 import { useParams, useNavigate } from 'react-router-dom';
-import { Card, Descriptions, Button, message, List, Modal, Tag, Badge, Space, Divider } from 'antd';
+import { Card, Descriptions, Button, message, List, Tag, Badge, Space, Divider } from 'antd';
 import { 
   CheckCircleFilled, 
   CloseCircleFilled, 
   WarningFilled, 
   CloudServerOutlined, 
   RollbackOutlined, 
-  LineChartOutlined,
   DeleteOutlined,
   InfoCircleOutlined,
   GlobalOutlined,
diff --git a/web/navy-fe/src/components/F5Info/F5InfoList.tsx b/web/navy-fe/src/components/F5Info/F5InfoList.tsx
index 9373f0a..cb28a01 100644
--- a/web/navy-fe/src/components/F5Info/F5InfoList.tsx
+++ b/web/navy-fe/src/components/F5Info/F5InfoList.tsx
@@ -1,38 +1,12 @@
 import { useEffect, useState, useCallback } from 'react';
-import { Table, Space, Button, message, Popconfirm, Card, Input, Modal, Tag } from 'antd';
-import { SearchOutlined, CheckCircleFilled, CloseCircleFilled, WarningFilled, CloudServerOutlined, LineChartOutlined, ReloadOutlined } from '@ant-design/icons';
+import { Table, Space, Button, message, Popconfirm, Card, Input, Tag } from 'antd';
+import { SearchOutlined, CheckCircleFilled, CloseCircleFilled, WarningFilled, CloudServerOutlined, ReloadOutlined } from '@ant-design/icons';
 import { useNavigate } from 'react-router-dom';
 import type { ColumnsType, TablePaginationConfig } from 'antd/es/table/interface';
 import request from '../../utils/request';
 import type { F5Info, F5InfoListResponse, F5InfoQuery } from '../../types/f5';
 import Highlighter from 'react-highlight-words';
 
-// 格式化时间为 yyyy-MM-dd HH:mm:ss
-const formatDateTime = (dateString: string) => {
-  if (!dateString) return '';
-  
-  try {
-    const date = new Date(dateString);
-    
-    // 检查日期是否有效
-    if (isNaN(date.getTime())) {
-      return dateString;
-    }
-    
-    const year = date.getFullYear();
-    const month = String(date.getMonth() + 1).padStart(2, '0');
-    const day = String(date.getDate()).padStart(2, '0');
-    const hours = String(date.getHours()).padStart(2, '0');
-    const minutes = String(date.getMinutes()).padStart(2, '0');
-    const seconds = String(date.getSeconds()).padStart(2, '0');
-    
-    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
-  } catch (error) {
-    console.error('日期格式化错误:', error);
-    return dateString;
-  }
-};
-
 // 获取状态对应的图标和颜色
 const getStatusInfo = (status: string) => {
   const lowerStatus = status.toLowerCase();
@@ -437,7 +411,6 @@ const F5InfoList: React.FC = () => {
         onChange={handleTableChange}
         scroll={{ x: 1300 }}
         rowClassName={(record) => {
-          const statusInfo = getStatusInfo(record.status);
           return record.ignored ? 'ignored-row' : `status-${record.status.toLowerCase()}-row`;
         }}
         onRow={(record) => {
diff --git a/web/navy-fe/src/utils/request.ts b/web/navy-fe/src/utils/request.ts
index 6672c5c..5fb5af7 100644
--- a/web/navy-fe/src/utils/request.ts
+++ b/web/navy-fe/src/utils/request.ts
@@ -3,6 +3,11 @@ import { message } from 'antd';
 
 console.log('API 基础路径:', process.env.REACT_APP_API_BASE_URL);
 
+// 自定义错误类型
+interface ApiError extends Error {
+  response?: any;
+}
+
 const request = axios.create({
   baseURL: 'http://localhost:8080/fe-v1', // 直接使用完整的API地址
   timeout: 10000,
@@ -27,6 +32,17 @@ request.interceptors.request.use(
 request.interceptors.response.use(
   (response) => {
     console.log('收到响应:', response.status, response.config.url, response.data);
+    // 检查是否包含新的响应格式
+    if (response.data && response.data.code !== undefined) {
+      // 如果状态码表示错误，抛出错误
+      if (response.data.code >= 400) {
+        const error = new Error(response.data.msg || '未知错误') as ApiError;
+        error.response = response;
+        throw error;
+      }
+      // 返回data字段中的数据
+      return response.data.data;
+    }
     return response.data;
   },
   (error) => {
@@ -35,7 +51,11 @@ request.interceptors.response.use(
     if (error.response) {
       // 服务器返回了错误状态码
       console.error('服务器错误:', error.response.status, error.response.data);
-      message.error(error.response.data?.error || `请求失败 (${error.response.status})`);
+      // 使用新的错误消息格式
+      const errorMsg = error.response.data?.msg || 
+                       error.response.data?.error || 
+                       `请求失败 (${error.response.status})`;
+      message.error(errorMsg);
     } else if (error.request) {
       // 请求发送了但没有收到响应
       console.error('网络错误: 没有收到响应');
-- 
2.32.0 (Apple Git-132)

